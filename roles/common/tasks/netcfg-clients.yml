# Define networking interfaces for end-to-end hosts
---

#- debug:
#    msg: "Host: {{ host }}, current host: {{ current_host }}, item: {{ item }}"
#  when: current_host is defined
#  vars:
#    current_host: "{{ host }} | search({{ item.value }})"
##    current_host: hostsvars[inventory_hostname]['ansible_default_ipv4']['address'] }} | search("{{ ips }}")
#    ips: "{{ item.value.ip }}"
#    host: "{{ item.key }}"
#  with_dict:
#    "{{ onos.clients }}"

- name: Define name per client
  hostname:
    name: "{{ host }}"
#  when: name | search("host")
  when: current_host is defined
  vars:
#    current_host: "{{ host }} | search({{ item.value.ip }})"
    current_host: "hostsvars[inventory_hostname]['ansible_default_ipv4']['address'] | search({{ ips }})"
    ips: "{{ item.value.ip }}"
    host: "{{ item.key }}"
  with_dict:
    "{{ onos.clients }}"

# TODO Replace by "shell" task. nmcli depends on dbus-python bindings
- name: Configure data plane interfaces per client
  nmcli:
    conn_name: "{{ name }}"
    type: ethernet
    ip4: "{{ ip }}"
    state: present
  when: name | search("eth")
  vars:
    name: "{{ iface | regex_replace(\"{(.*): u'(.*)'}\", \"\\1\") }}"
    # Filter addresses in list to just have the IP value
    ip: "{{ iface | regex_replace(\"{(.*): u'(.*)'}\", \"\\2\") }}"
    iface: "{{ item.1 }}"
  with_subelements:
    - "{{ onos.clients }}"
    - ip
